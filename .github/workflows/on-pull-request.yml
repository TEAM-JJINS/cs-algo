name: On Pull Request Created

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  move-issue-to-in-review:
    runs-on: ubuntu-latest

    steps:
      - name: 🧪 PR 정보 출력
        run: |
          echo "📝 PR Title: ${{ github.event.pull_request.title }}"
          echo "🌿 Source Branch: ${{ github.event.pull_request.head.ref }}"

      - name: 🔍 브랜치명에서 이슈 번호 추출
        id: extract
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oE '#[0-9]+' | tr -d '#')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "❌ 브랜치명에서 이슈 번호 추출 실패."
            exit 1
          fi
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: 🔄 GitHub Projects 상태를 In Review로 변경
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          ISSUE_NUMBER=${{ steps.extract.outputs.issue_number }}
          REPO=cs-algo
          OWNER=TEAM-JJINS
          PROJECT_NUMBER=1

          echo "🔍 이슈 번호: $ISSUE_NUMBER"

          ISSUE_ID=$(gh api graphql -f query="query { repository(owner: \"$OWNER\", name: \"$REPO\") { issue(number: $ISSUE_NUMBER) { id } } }" --jq '.data.repository.issue.id')
          echo "🆔 ISSUE_ID: $ISSUE_ID"
          if [ -z "$ISSUE_ID" ]; then
            echo "⚠️ 이슈 없음. 상태 전이 생략."
            exit 0
          fi

          PROJECT_ID=$(gh api graphql -f query="query { organization(login: \"$OWNER\") { projectV2(number: $PROJECT_NUMBER) { id } } }" --jq '.data.organization.projectV2.id')
          echo "🆔 PROJECT_ID: $PROJECT_ID"

          PROJECT_FIELDS=$(gh api graphql -f query="query { node(id: \"$PROJECT_ID\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }")

          STATUS_FIELD_ID=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          echo "📌 STATUS_FIELD_ID: $STATUS_FIELD_ID"

          IN_REVIEW_OPTION_ID=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="In Review") | .id')
          echo "📌 IN_REVIEW_OPTION_ID: $IN_REVIEW_OPTION_ID"

          ITEM_ID=""
          CURSOR=null
          while true; do
            if [ "$CURSOR" = "null" ]; then QUERY_ARG='first: 100'; else QUERY_ARG="first: 100, after: \"$CURSOR\""; fi
            RESPONSE=$(gh api graphql -f query="query { organization(login: \"$OWNER\") { projectV2(number: $PROJECT_NUMBER) { items($QUERY_ARG) { pageInfo { endCursor hasNextPage } nodes { id content { ... on Issue { number } } } } } } }")
            ITEM_ID=$(echo "$RESPONSE" | jq -r --argjson issue "$ISSUE_NUMBER" '.data.organization.projectV2.items.nodes[] | select(.content.number == $issue) | .id')
            if [ -n "$ITEM_ID" ] && [ "$ITEM_ID" != "null" ]; then break; fi
            HAS_NEXT=$(echo "$RESPONSE" | jq -r '.data.organization.projectV2.items.pageInfo.hasNextPage')
            if [ "$HAS_NEXT" != "true" ]; then break; fi
            CURSOR=$(echo "$RESPONSE" | jq -r '.data.organization.projectV2.items.pageInfo.endCursor')
          done

          if [ -z "$ITEM_ID" ]; then
            echo "⚠️ 프로젝트에 포함되지 않은 이슈입니다. 상태 전이 생략."
            exit 0
          fi

          gh api graphql -f query="mutation {
            updateProjectV2ItemFieldValue(input: {
              projectId: \"$PROJECT_ID\",
              itemId: \"$ITEM_ID\",
              fieldId: \"$STATUS_FIELD_ID\",
              value: { singleSelectOptionId: \"$IN_REVIEW_OPTION_ID\" }
            }) {
              projectV2Item { id }
            }
          }"

          echo "✅ 상태가 'In Review'로 변경되었습니다."
