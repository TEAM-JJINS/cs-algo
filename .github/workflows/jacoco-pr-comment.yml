name: Test Coverage Comment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  # 변경 모듈 탐지
  changes:
    runs-on: ubuntu-latest
    outputs:
      application: ${{ steps.filter.outputs.application }}
      common: ${{ steps.filter.outputs.common }}
      domain: ${{ steps.filter.outputs.domain }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      server: ${{ steps.filter.outputs.server }}
      scheduler: ${{ steps.filter.outputs.scheduler }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            # Common 모듈 (모든 모듈에 영향)
            common:
              - 'csalgo-common/**'

            # Domain 모듈 (application, server, scheduler 영향)
            domain:
              - 'csalgo-domain/**'
              - 'csalgo-common/**'

            # Application 모듈 (server, scheduler 영향)
            application:
              - 'csalgo-application/**'
              - 'csalgo-domain/**'
              - 'csalgo-common/**'

            # Infrastructure 모듈 (server, scheduler 영향)
            infrastructure:
              - 'csalgo-infrastructure/**'
              - 'csalgo-common/**'

            # Server 모듈 (자체 변경 or 하위 모듈 변경)
            server:
              - 'csalgo-server/**'
              - 'csalgo-application/**'
              - 'csalgo-domain/**'
              - 'csalgo-infrastructure/**'
              - 'csalgo-common/**'

            # Scheduler 모듈 (자체 변경 or 하위 모듈 변경)
            scheduler:
              - 'csalgo-scheduler/**'
              - 'csalgo-application/**'
              - 'csalgo-domain/**'
              - 'csalgo-infrastructure/**'
              - 'csalgo-common/**'

  test-application:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.application == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-application:checkstyleMain :csalgo-application:checkstyleTest
      - run: ./gradlew :csalgo-application:test :csalgo-application:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: application-exec
          path: csalgo-application/build/jacoco/test.exec

  test-common:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.common == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-common:checkstyleMain :csalgo-common:checkstyleTest
      - run: ./gradlew :csalgo-common:test :csalgo-common:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: common-exec
          path: csalgo-common/build/jacoco/test.exec

  test-domain:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.domain == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-domain:checkstyleMain :csalgo-domain:checkstyleTest
      - run: ./gradlew :csalgo-domain:test :csalgo-domain:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: domain-exec
          path: csalgo-domain/build/jacoco/test.exec

  test-infrastructure:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.infrastructure == 'true'
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-infrastructure:checkstyleMain :csalgo-infrastructure:checkstyleTest
      - run: ./gradlew :csalgo-infrastructure:test :csalgo-infrastructure:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: infra-exec
          path: csalgo-infrastructure/build/jacoco/test.exec

  test-server:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.server == 'true'
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pw
          MYSQL_ROOT_PASSWORD: root_pw
        ports: [ "3306:3306" ]
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
    env:
      DB_HOST: 127.0.0.1
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/test_db
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: test_pw
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-server:checkstyleMain :csalgo-server:checkstyleTest
      - run: ./gradlew :csalgo-server:test :csalgo-server:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: server-exec
          path: csalgo-server/build/jacoco/test.exec

  test-scheduler:
    needs: changes
    if: github.ref == 'refs/heads/main' || needs.changes.outputs.scheduler == 'true'
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pw
          MYSQL_ROOT_PASSWORD: root_pw
        ports: [ "3306:3306" ]
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
    env:
      DB_HOST: 127.0.0.1
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/test_db
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: test_pw
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: ./gradlew :csalgo-scheduler:checkstyleMain :csalgo-scheduler:checkstyleTest
      - run: ./gradlew :csalgo-scheduler:test :csalgo-scheduler:jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: scheduler-exec
          path: csalgo-scheduler/build/jacoco/test.exec

  # 병합 및 커버리지 리포트 생성
  merge-coverage-report:
    needs:
      - test-application
      - test-common
      - test-domain
      - test-infrastructure
      - test-server
      - test-scheduler
    if: always() # skip된 job 있어도 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      - name: Download all jacoco.exec artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged-execs

      - name: Move exec files if exists
        run: |
          mkdir -p build/jacoco
          # 존재하는 exec만 복사 (없어도 실패하지 않음)
          find merged-execs -name "test.exec" -exec cp {} build/jacoco/ \; || true
          # exec이 하나도 없으면 dummy 파일 생성
          if [ -z "$(ls -A build/jacoco)" ]; then
            echo "No exec files found, creating dummy.exec"
            touch build/jacoco/dummy.exec
          fi

      - run: ./gradlew classes
      - run: ./gradlew jacocoRootReport
      - run: ./gradlew classes
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info
      - name: Deploy coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: build/reports/jacoco/test/html
          destination_dir: coverage/pr-${{ github.event.pull_request.number }}
      - name: Get coverage from SonarCloud (PR-specific)
        id: sonar
        run: |
          echo "Fetching PR-specific coverage from SonarCloud..."
          PR_NUMBER=${{ github.event.pull_request.number }}
          RESPONSE=$(curl -s "https://sonarcloud.io/api/measures/component?component=TEAM-JJINS_cs-algo&metricKeys=coverage&pullRequest=$PR_NUMBER" \
          -H "Authorization: Bearer $SONAR_TOKEN")
          COVERAGE=$(echo "$RESPONSE" | jq -r '.component.measures[0].value')
          echo "📊 Coverage: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
      - name: Add coverage comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            🔍 **Test Coverage Report (via SonarCloud)**
            > ✅ Line Coverage: `${{ steps.sonar.outputs.coverage }}%`
            📄 [View Full HTML Report](https://TEAM-JJINS.github.io/cs-algo/coverage/pr-${{ github.event.pull_request.number }}/index.html)  
            🔎 [View SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=TEAM-JJINS_cs-algo)
            _This comment was automatically generated by GitHub Actions._
