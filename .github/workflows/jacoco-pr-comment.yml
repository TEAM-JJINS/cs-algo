name: Test Coverage Comment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

jobs:
  test-and-report:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout source
        uses: actions/checkout@v3

      # 2. 테스트용 MySQL 컨테이너 설정
      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: ${{ secrets.DB_NAME }}
          mysql user: ${{ secrets.DB_USERNAME }}
          mysql password: ${{ secrets.DB_PASSWORD }}

      # 3. JDK 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4. Gradle 테스트 및 커버리지 리포트 생성
      - name: Build with Gradle & Run Tests
        run: ./gradlew clean test jacocoTestReport
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # 5. JaCoCo 리포트 XML 파싱 (정확한 경로/클래스/소스 지정)
      - name: Parse JaCoCo Coverage Report
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: build/reports/jacoco/test/jacocoTestReport.xml
          classes: build/classes/java/main
          source: src/main/java
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 10
          min-coverage-changed-files: 0

      # 6. PR 번호별 디렉토리 생성 후 HTML 리포트 복사
      - name: Copy coverage to publish folder
        run: |
          mkdir -p coverage/pr-${PR_NUMBER}
          cp -r build/reports/jacoco/test/html/* coverage/pr-${PR_NUMBER}/

      # 7. HTML 리포트를 gh-pages 브랜치에 배포
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage
          publish_branch: gh-pages
          destination_dir: .

      # 8. PR 코멘트에 커버리지 요약 및 리포트 링크 추가
      - name: Comment on PR with Coverage Report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          header: coverage
          message: |
            ### ✅ Test Coverage Summary
            - Lines: `${{ steps.jacoco.outputs.covered_lines }}` / `${{ steps.jacoco.outputs.total_lines }}`
            - Coverage: `${{ steps.jacoco.outputs.coverage }}%`
            - [📊 View Full Coverage Report](https://team-jjins.github.io/cs-algo/pr-${{ github.event.pull_request.number }}/)
