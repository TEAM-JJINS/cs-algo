name: CD - Build & Deploy to NKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

jobs:
  build-and-deploy:
    runs-on: [ self-hosted, nks ] # NKS와 같은 VPC 내부에 있는 self-hosted 러너 사용
    env:
      IMAGE_TAG: ${{ github.sha }} # 고유 배포 버전 식별용 태그 (커밋 SHA)
      NAMESPACE: csalgo             # Kubernetes 네임스페이스
      CHART_PATH: ./charts/app      # 공용 Helm 차트 경로
    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Gradle Wrapper 실행 권한 부여
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      # 3. JDK 설치 (두 모듈 모두 Java 애플리케이션이므로 필요)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # 4. 서버와 웹 모듈 JAR 빌드 (Dockerfile이 build/libs/*.jar를 COPY하므로 필수)
      - name: Build JARs (server & web)
        run: |
          ./gradlew \
            :csalgo-server:clean :csalgo-server:bootJar \
            :csalgo-web:clean    :csalgo-web:bootJar \
            -x test

      # 5. kubectl 설치 (러너에 없을 경우)
      - name: Install kubectl (if missing)
        run: |
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sL https://dl.k8s.io/release/stable.txt)"
            curl -LO "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client

      # 6. Helm 설치 (러너에 없을 경우)
      - name: Install Helm (if missing)
        run: |
          if ! command -v helm >/dev/null 2>&1; then
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
          helm version

      # 7. Docker Buildx 세팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 8. NCR(네이버 클라우드 레지스트리) 로그인
      - name: Login to NCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCR_REGISTRY }}
          username: ${{ secrets.NCR_USERNAME }}
          password: ${{ secrets.NCR_PASSWORD }}

      # 9. 서버 이미지 빌드 & 푸시
      - name: Build & Push image (server)
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-server
          file: ./csalgo-server/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:latest

      # 10. 웹 이미지 빌드 & 푸시
      - name: Build & Push image (web)
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-web
          file: ./csalgo-web/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:latest

      # 11. kubeconfig 복원 (GitHub Secrets → 러너 환경)
      - name: Restore kubeconfig
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          echo "${KUBECONFIG_B64}" | base64 -d > "$HOME/kubeconfig"
          echo "KUBECONFIG=$HOME/kubeconfig" >> "$GITHUB_ENV"

      # 12. Helm upgrade/install - 서버
      - name: Helm upgrade (server)
        run: |
          helm upgrade --install csalgo-server "${CHART_PATH}" \
            --namespace "${NAMESPACE}" \
            --create-namespace \
            --set image.repository=${{ secrets.NCR_REGISTRY }}/csalgo-server \
            --set image.tag="${IMAGE_TAG}" \
            --set image.pullPolicy=IfNotPresent \
            --set imagePullSecrets[0].name=ncr-auth \
            --set service.targetPort=8080 \
            --set probes.liveness.path=/actuator/health/liveness \
            --set probes.readiness.path=/actuator/health/readiness \
            --atomic --wait --timeout 300s

      # 13. Helm upgrade/install - 웹
      - name: Helm upgrade (web)
        run: |
          helm upgrade --install csalgo-web "${CHART_PATH}" \
            --namespace "${NAMESPACE}" \
            --set image.repository=${{ secrets.NCR_REGISTRY }}/csalgo-web \
            --set image.tag="${IMAGE_TAG}" \
            --set image.pullPolicy=IfNotPresent \
            --set imagePullSecrets[0].name=ncr-auth \
            --set service.targetPort=80 \
            --set probes.liveness.path=/ \
            --set probes.readiness.path=/ \
            --atomic --wait --timeout 300s
