name: CD - Build & Deploy to NKS (Terraform)

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

jobs:
  build-and-deploy:
    runs-on: [ self-hosted ]          # NKS와 같은 VPC의 self-hosted 러너
    env:
      IMAGE_TAG: ${{ github.sha }}         # 배포 버전(커밋 SHA)
    steps:
      # 1) 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Gradle 실행권한 + JDK 설치
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # 3) 두 모듈 JAR 빌드 (Dockerfile이 build/libs/*.jar를 COPY하므로 필수)
      - name: Build JARs (server & web)
        run: |
          ./gradlew \
            :csalgo-server:clean :csalgo-server:bootJar \
            :csalgo-web:clean    :csalgo-web:bootJar \
            -x test

      # 4) Docker Buildx + NCR 로그인
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to NCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCR_REGISTRY }}
          username: ${{ secrets.NCR_USERNAME }}
          password: ${{ secrets.NCR_PASSWORD }}

      # 5) 서버/웹 이미지 빌드 & 푸시 (latest + SHA)
      - name: Build & Push server image
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-server
          file: ./csalgo-server/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:latest

      - name: Build & Push web image
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-web
          file: ./csalgo-web/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:latest

      # 6) NKS 접속 준비: NCP 크리덴셜 export + kubeconfig 복원(exec 방식)
      - name: Add ncp-iam-authenticator to PATH
        run: echo "/home/ubuntu/bin" >> $GITHUB_PATH

      - name: Export NCP creds for ncp-iam-authenticator
        env:
          NCLOUD_ACCESS_KEY: ${{ secrets.NCR_USERNAME }}   # access_key = NCR_USERNAME
          NCLOUD_SECRET_KEY: ${{ secrets.NCR_PASSWORD }}   # secret_key = NCR_PASSWORD
        run: |
          echo "NCLOUD_ACCESS_KEY=${NCLOUD_ACCESS_KEY}" >> $GITHUB_ENV
          echo "NCLOUD_SECRET_KEY=${NCLOUD_SECRET_KEY}" >> $GITHUB_ENV
          echo "NCLOUD_REGION=KR" >> $GITHUB_ENV

      - name: Restore kubeconfig.yaml
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}  # base64 인코딩된 kubeconfig
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/csalgo-iac"
          echo "${KUBECONFIG_B64}" | base64 -d > "${GITHUB_WORKSPACE}/csalgo-iac/kubeconfig.yaml"
          chmod 600 "${GITHUB_WORKSPACE}/csalgo-iac/kubeconfig.yaml"
          echo "KUBECONFIG=${GITHUB_WORKSPACE}/csalgo-iac/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Ensure ncp-iam-authenticator in PATH
        run: |
          if ! command -v ncp-iam-authenticator >/dev/null 2>&1; then
            echo "ncp-iam-authenticator not found in PATH"; exit 1
          fi
          ncp-iam-authenticator version || true

      # 7) Terraform 설치
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      # 8) terraform.tfvars 복원 (Secret → 파일) + kubeconfig_path 주입
      - name: Write terraform.tfvars from secret
        working-directory: ./csalgo-iac
        env:
          TFVARS_CONTENT: ${{ secrets.TFVARS_CONTENT }}
        run: |
          set -euo pipefail
          printf '%s' "$TFVARS_CONTENT" > terraform.tfvars
          echo "== tfvars written =="
          sed -n '1,50p' terraform.tfvars

      # 9) Terraform init & apply (이미지 repo:tag는 -var로 주입)
      - name: Terraform Init
        working-directory: ./csalgo-iac
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN }}
        run: |
          terraform init

      - name: Terraform Apply
        working-directory: ./csalgo-iac
        env:
          NCLOUD_ACCESS_KEY: ${{ secrets.NCR_USERNAME }}
          NCLOUD_SECRET_KEY: ${{ secrets.NCR_PASSWORD }}
          NCLOUD_API_GW: https://ncloud.apigw.ntruss.com
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN }}
        run: |
          terraform apply -auto-approve \
            -var "server_image=${{ secrets.NCR_REGISTRY }}/csalgo-server:${IMAGE_TAG}" \
            -var "web_image=${{ secrets.NCR_REGISTRY }}/csalgo-web:${IMAGE_TAG}"
