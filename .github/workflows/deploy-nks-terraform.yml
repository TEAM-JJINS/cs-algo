name: CD - Build & Deploy to NKS (Terraform only)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [ self-hosted, nks ] # NKS와 같은 VPC의 러너
    env:
      IMAGE_TAG: ${{ github.sha }}      # 이번 배포 태그
      NAMESPACE: csalgo
    steps:
      # 1) 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Gradle 권한 & JDK
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # 3) JAR 빌드 (두 모듈 모두 Dockerfile이 build/libs/*.jar를 COPY함)
      - name: Build JARs (server & web)
        run: |
          ./gradlew \
            :csalgo-server:clean :csalgo-server:bootJar \
            :csalgo-web:clean    :csalgo-web:bootJar \
            -x test

      # 4) kubectl/terraform/helm(옵션) 설치 — kubectl은 진단용, 실제 배포는 terraform
      - name: Install kubectl (if missing)
        run: |
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sL https://dl.k8s.io/release/stable.txt)"
            curl -LO "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 5) NCR 로그인
      - name: Login to NCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCR_REGISTRY }}
          username: ${{ secrets.NCR_USERNAME }}
          password: ${{ secrets.NCR_PASSWORD }}

      # 6) 서버/웹 이미지 빌드 & 푸시
      - name: Build & Push server image
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-server
          file: ./csalgo-server/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-server:latest

      - name: Build & Push web image
        uses: docker/build-push-action@v5
        with:
          context: ./csalgo-web
          file: ./csalgo-web/Dockerfile
          push: true
          tags: |
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:${{ env.IMAGE_TAG }}
            ${{ secrets.NCR_REGISTRY }}/csalgo-web:latest

      # 7) NCP 크리덴셜(= NCR 계정과 동일)과 kubeconfig 복원 (exec 인증)
      - name: Export NCP creds for ncp-iam-authenticator
        env:
          NCP_ACCESS_KEY: ${{ secrets.NCR_USERNAME }}
          NCP_SECRET_KEY: ${{ secrets.NCR_PASSWORD }}
        run: |
          echo "NCP_ACCESS_KEY=${NCP_ACCESS_KEY}" >> $GITHUB_ENV
          echo "NCP_SECRET_KEY=${NCP_SECRET_KEY}" >> $GITHUB_ENV
          echo "NCP_REGION=KR" >> $GITHUB_ENV

      - name: Restore kubeconfig (exec-based)
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          echo "${KUBECONFIG_B64}" | base64 -d > "$HOME/kubeconfig"
          echo "KUBECONFIG=$HOME/kubeconfig" >> "$GITHUB_ENV"

      - name: Ensure ncp-iam-authenticator present
        run: |
          if ! command -v ncp-iam-authenticator >/dev/null 2>&1; then
            echo "ncp-iam-authenticator not found in PATH"; exit 1
          fi
          ncp-iam-authenticator version || true

      # 8) Terraform init/plan/apply (image 태그 주입)
      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: infra/terraform
        run: |
          terraform apply -auto-approve \
            -var "kubeconfig_path=$HOME/kubeconfig" \
            -var "server_image=${{ secrets.NCR_REGISTRY }}/csalgo-server:${IMAGE_TAG}" \
            -var "web_image=${{ secrets.NCR_REGISTRY }}/csalgo-web:${IMAGE_TAG}"
