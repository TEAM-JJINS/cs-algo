plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
    id 'checkstyle'
    id "io.sentry.jvm.gradle" version "5.6.0"
}

group = 'kr.co.csalgo'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

/** ======================
 * Jacoco + Sonar
 ====================== **/
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register("jacocoRootReport", JacocoReport) {
    group = "verification"
    description = "Combines JaCoCo exec files from all modules and generates a unified report."

    // 각 모듈에서 업로드된 exec 파일들을 병합
    executionData.setFrom(
            fileTree("${rootProject.buildDir}/jacoco").matching {
                include("*.exec")
            }
    )

    // 각 모듈의 source 폴더 지정
    sourceDirectories.setFrom(
            files(
                    "csalgo-application/src/main/java",
                    "csalgo-common/src/main/java",
                    "csalgo-domain/src/main/java",
                    "csalgo-infrastructure/src/main/java",
                    "csalgo-server/src/main/java",
                    "csalgo-web/src/main/java"
            )
    )

    // 각 모듈의 컴파일된 클래스 디렉토리 지정
    classDirectories.setFrom(
            files(
                    "csalgo-application/build/classes/java/main",
                    "csalgo-common/build/classes/java/main",
                    "csalgo-domain/build/classes/java/main",
                    "csalgo-infrastructure/build/classes/java/main",
                    "csalgo-server/build/classes/java/main",
                    "csalgo-web/build/classes/java/main"
            )
    )

    // 리포트 형식 설정
    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/test/html"))
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacoco.xml"))
    }

    // 실행 전 report 디렉토리 생성 보장
    doFirst {
        file("${rootProject.buildDir}/reports/jacoco/test/html").mkdirs()
    }

    // 병합할 exec 파일 목록 출력
    doFirst {
        println "▶ JaCoCo exec files to merge:"
        fileTree("${rootProject.buildDir}/jacoco").matching {
            include("*.exec")
        }.files.each {
            println " - " + it.name
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "TEAM-JJINS_cs-algo"
        property "sonar.organization", "team-jjins"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.buildDir}/reports/jacoco/test/jacoco.xml"
        property "sonar.exclusions", "**/src/main/java/kr/co/csalgo/web/**/*"

        property "sonar.issue.ignore.multicriteria", "e1"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "java:S00105"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "**/MailTemplate.java"

        property "sonar.java.binaries",
                "csalgo-application/build/classes/java/main," +
                        "csalgo-common/build/classes/java/main," +
                        "csalgo-domain/build/classes/java/main," +
                        "csalgo-infrastructure/build/classes/java/main," +
                        "csalgo-server/build/classes/java/main,"
    }
}

/** ======================
 * 공통 subprojects
 ====================== **/
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group = 'kr.co.csalgo'
    version = '1.0.0-SNAPSHOT'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        /* Lombok */
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        testCompileOnly 'org.projectlombok:lombok:1.18.30'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

        /* Spring Core */
        api 'org.springframework:spring-web:6.2.7'
        api 'org.springframework:spring-context:6.2.7'
        api 'org.springframework:spring-webmvc:6.2.7'
        api 'org.springframework.data:spring-data-jpa:3.4.5'
        api 'org.springframework.boot:spring-boot-starter-validation:3.4.5'

        /* Jackson */
        api 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
        api 'com.fasterxml.jackson.core:jackson-annotations:2.18.3'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.3'

        /* SLF4J */
        api 'org.slf4j:slf4j-api:2.0.16'

        /* Jakarta Spec */
        implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
        implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
        implementation 'jakarta.el:jakarta.el-api:5.0.1'

        /* 공통 테스트 */
        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.4.5'

        /* 환경 변수 */
        implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
            showCauses = true
            showExceptions = true
            showStackTraces = true
            exceptionFormat = 'full'
        }
    }
}

/** ======================
 * 루트 (실행 모듈)
 ====================== **/
dependencies {
    implementation project(":csalgo-common")
    implementation project(":csalgo-infrastructure")
    implementation project(":csalgo-domain")
    implementation project(":csalgo-application")
    implementation project(":csalgo-server")
    implementation project(":csalgo-web")
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    doFirst {
        copy {
            from rootProject.file(".env")
            into "$buildDir/test-env"
        }
    }
    systemProperty "DOTENV_DIR", "$buildDir/test-env"
}
